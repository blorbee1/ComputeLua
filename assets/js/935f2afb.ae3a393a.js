"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"defaultSidebar":[{"type":"link","label":"About","href":"/ComputeLua/docs/intro","docId":"intro"},{"type":"link","label":"Getting Started","href":"/ComputeLua/docs/gettingstarted","docId":"gettingstarted"},{"type":"link","label":"Dispatcher","href":"/ComputeLua/docs/dispatcher","docId":"dispatcher"},{"type":"link","label":"Compute Buffer","href":"/ComputeLua/docs/computebuffer","docId":"computebuffer"},{"type":"link","label":"Worker","href":"/ComputeLua/docs/worker","docId":"worker"}]},"docs":{"computebuffer":{"id":"computebuffer","title":"Compute Buffer","description":"A Compute Buffer is the way to send big bunches of data to the workers so they can process it and send it back.","sidebar":"defaultSidebar"},"dispatcher":{"id":"dispatcher","title":"Dispatcher","description":"The Dispatcher is the main class that will handle all the workers and threads. You can multiple Dispatchers if you want, but they will have their own workers.","sidebar":"defaultSidebar"},"gettingstarted":{"id":"gettingstarted","title":"Getting Started","description":"Install","sidebar":"defaultSidebar"},"intro":{"id":"intro","title":"About","description":"A simple library to make Parallel Luau easier using Unity like ComputeBuffers with a Dispatcher.","sidebar":"defaultSidebar"},"worker":{"id":"worker","title":"Worker","description":"A worker is a script that is cloned by the Dispatcher which will perform small tasks. It may not seem important at first but the Dispatcher will clone a lot of things and they will all run in parallel, allowing these small tasks to add up into one big tasks that would take several seconds or even minutes to calculated if it was running serially.","sidebar":"defaultSidebar"}}}')}}]);