"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[15],{918:e=>{e.exports=JSON.parse('{"functions":[{"name":"_new","desc":"Create a ComputeBuffer","params":[{"name":"name","desc":"Name of the buffer","lua_type":"string"}],"returns":[{"desc":"","lua_type":"ComputeBuffer"}],"function_type":"static","tags":["Parallel Unsafe"],"since":"v1.0.0","private":true,"source":{"line":400,"path":"src/init.lua"}},{"name":"GetData","desc":"Get the data of the ComputeBuffer","params":[{"name":"self","desc":"","lua_type":"ComputeBuffer"}],"returns":[{"desc":"The data of the buffer, a read-only table","lua_type":"ComputeBufferDataType"}],"function_type":"static","tags":["Parallel Unsafe"],"since":"v1.0.0","source":{"line":416,"path":"src/init.lua"}},{"name":"SetData","desc":"Set the data of the ComputeBuffer. Be careful to only call this when no workers are working","params":[{"name":"self","desc":"","lua_type":"ComputeBuffer"},{"name":"bufferData","desc":"The data to set the buffer with, only certain data types are allowed.","lua_type":"ComputeBufferDataType"}],"returns":[],"function_type":"static","tags":["Parallel Unsafe"],"since":"v1.0.0","source":{"line":428,"path":"src/init.lua"}},{"name":"Clean","desc":"The cleanup function for a ComputeBuffer. This is important to call to free up memory","params":[{"name":"self","desc":"","lua_type":"ComputeBuffer"}],"returns":[],"function_type":"static","tags":["Parallel Unsafe"],"since":"v1.0.0","source":{"line":440,"path":"src/init.lua"}}],"properties":[{"name":"name","desc":"The name of the buffer.","lua_type":"string","readonly":true,"source":{"line":371,"path":"src/init.lua"}},{"name":"_bufferName","desc":"The extended name of the buffer, used to define the SharedTable ID.","lua_type":"string","private":true,"readonly":true,"source":{"line":378,"path":"src/init.lua"}}],"types":[{"name":"BufferDataType","desc":"The only data types allowed in buffers, Compute or Variable","lua_type":"Vector2 | Vector3 | CFrame | Color3 | UDim | UDim2 | number | boolean | string","source":{"line":48,"path":"src/init.lua"}},{"name":"ComputeBufferDataType","desc":"Type for the data of a ComputeBuffer","lua_type":"{ [number]: BufferDataType | ComputeBufferDataType }","source":{"line":59,"path":"src/init.lua"}}],"name":"ComputeBuffer","desc":"Data storage to be sent over to the workers.\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal ComputeLua = require(ReplicatedStorage.ComputeLua)\\n\\nlocal computeBuffer = ComputeLua.CreateComputeBuffer(\\"PositionBuffer\\")\\ncomputeBuffer:SetData({\\n\\tVector3.zero,\\n\\tVector3.new(5, 1, 2),\\n\\tVector3.yAxis,\\n\\tVector3.zAxis\\n})\\n```","source":{"line":365,"path":"src/init.lua"}}')}}]);